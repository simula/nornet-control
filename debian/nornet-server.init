#!/bin/bash
# --------------- NorNet -- The Multi-Homing Testbed Project ----------------
#
# Copyright (C) 2012-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

### BEGIN INIT INFO
# Provides:          nornet-server
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: NorNet Server
# Description:       This service provides the NorNet Server management.
### END INIT INFO


NAME="nornet-server"
DESC="NorNet Virtual Systems"
NORNET_DIRECTORY="/etc/nornet"
LOGFILE="/var/log/nornet-server.log"
# NORNET_DIRECTORY=/home/dreibh/src/rn/nornet/nornet-control/src
# LOGFILE="/tmp/nornet-server.log"
PATH=$NORNET_DIRECTORY:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ACTION="$1"
MACHINE_NAME="$2"
shift


# Check whether NorNet directory is existing
if [ ! -e "$NORNET_DIRECTORY" ] ; then
   exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


set -e

cd "$NORNET_DIRECTORY"

# Load configuration from API config file
NorNet_Server_DefaultVNCAddress=""
NorNet_Server_DefaultVNCPassword=""
if [ ! -e ./vsystems ] ; then
   echo >&2 "ERROR: $NORNET_DIRECTORY/vsystems does not exist!"
   exit 0
fi
if [ -e ./nornetapi-config ] ; then
   . ./nornetapi-config
fi
if [ "$NorNet_LocalNode_NorNetUser" = "" ] ; then
   NorNet_LocalNode_NorNetUser="nornetpp"
fi


# Log what is going on ...
echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: ###### $0 $ACTION $@ ######\x1b[0m"  >>$LOGFILE 2>&1


# ###### Start virtual systems ##############################################
# $1 = Machine name (or "" for ALL)
start_virtual_systems ()
{
   cd vsystems
   echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Starting virtual systems ...\x1b[0m"
   VSYSTEMS=`find . -name "[0-9][0-9]*[a-zA-Z0-9]" -printf "%f\\n" | sort`
   lastID=-1
   for vsystem in $VSYSTEMS ; do
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Processing $vsystem ...\x1b[0m"
      let SYSNUM=10*${vsystem:0:2} || true   # 10*start priority (from first 2 characters of file name)
      if [ $SYSNUM -le $lastID ] ; then
         let SYSNUM=$lastID+1 || true
      fi
      lastID=$SYSNUM
      NAME="BAD-NAME"
      STARTDELAY=0
      NUMCPUS=1
      MEMORY=
      GETHOSTTIMEDISABLED=
      VNCPORT=-1
      VNCADDRESS="$NorNet_Server_DefaultVNCAddress"
      VNCPASSWORD="$NorNet_Server_DefaultVNCPassword"
      VNCKEYMAP="en-us"
      OPTIONS="default"
      ( . ./$vsystem
        vncOptions=
        if [ $VNCPORT -eq -1 ] ; then
           let VNCPORT=5000+$SYSNUM || true
        fi
        if [ "$1" = "" -o "$NAME" = "$1" ] ; then
           if [ "$NAME" = "$1" ] ; then
              STARTDELAY=0   # Do not wait when restricted to one machine!
           fi
           Start-VSystem "$NAME" "$STARTDELAY" "$NUMCPUS" "$MEMORY" "$GETHOSTTIMEDISABLED" "$VNCADDRESS" "$VNCPORT" "$VNCPASSWORD" "$VNCKEYMAP" "$OPTIONS" || true
        else
           echo "Skipped".
        fi
      ) || true
   done
   echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Done!\x1b[0m"
   cd ..
}


# ###### Stop virtual systems ###############################################
# $1 = Machine name (or "" for ALL)
stop_virtual_systems ()
{
   echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Stopping virtual systems ...\x1b[0m"
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   for vsystem in $VSYSTEMS ; do
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Processing $vsystem ... $1\x1b[0m"
      NAME="BAD-NAME"
      STOPDELAY=0
      ( . ./$vsystem && \
        if [ "$1" = "" -o "$NAME" = "$1" ] ; then
           Stop-VSystem "$NAME" "$STOPDELAY"
        else
           echo "Skipped".
        fi
      ) || true
   done
   echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Done!\x1b[0m"
}


# ###### Load kernel modules ################################################
load_modules ()
{
   if [ "$NorNet_Server_VirtualizationSystem" = "" -o "$NorNet_Server_VirtualizationSystem" = "VirtualBox" ] ; then
      for vboxModule in vboxdrv vboxnetadp vboxnetflt vboxpci ; do
         modprobe $vboxModule >>$LOGFILE 2>&1 || true
      done
   elif [ "$NorNet_Server_VirtualizationSystem" = "KVM" ] ; then

      (
      socket="/var/run/libvirt/libvirt-sock"
      if [ ! -e "$socket" ] ; then
         echo "$socket not available yet => need to start QEMU-KVM ..."
         service qemu-kvm start || true
         service libvirt-bin start || true

         i=0
         while [ $i -lt 30 ] ; do
            sleep 1
            if [ -e "$socket" ] ; then
               break
            fi
            let i=$i+1
            echo "$i ..."
         done

      fi
      ) >>$LOGFILE 2>&1

   fi
}


# ###### Unload kernel modules ##############################################
unload_modules ()
{
   if [ "$NorNet_Server_VirtualizationSystem" = "" -o "$NorNet_Server_VirtualizationSystem" = "VirtualBox" ] ; then
      for vboxModule in vboxpci vboxnetflt vboxnetadp vboxdrv ; do
         rmmod $vboxModule >>$LOGFILE 2>&1 || true
      done
   fi
}


# ###### Show status of virtual systems #####################################
# $1 = Machine name (or "" for ALL)
show_status ()
{
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   for vsystem in $VSYSTEMS ; do
      NAME="BAD-NAME"
      ( . ./$vsystem && \
        if [ "$1" = "" -o "$NAME" = "$1" ] ; then
           echo "$vsystem: $NAME -> `Check-VSystem "$NAME"`"
        fi
      ) || true
   done
}


# ###### Main program #######################################################
case "$ACTION" in
  start)
     # First, ensure that necessary kernel modules are loaded!
     load_modules
     # Now, start the virtual systems.
     start_virtual_systems "$MACHINE_NAME" >>$LOGFILE 2>&1
     ;;
  stop)
     stop_virtual_systems "$MACHINE_NAME" >>$LOGFILE 2>&1
     # Try to unload kernel modules
     unload_modules
     ;;
  restart)
     stop_virtual_systems  "$MACHINE_NAME" >>$LOGFILE 2>&1 || true
     unload_modules
     load_modules
     start_virtual_systems "$MACHINE_NAME" >>$LOGFILE 2>&1
     ;;
  force-reload)
     ;;
  status)
     show_status "$MACHINE_NAME"
     ;;
  *)
     N=/etc/init.d/$NAME
     echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
     exit 1
     ;;
esac

exit 0
