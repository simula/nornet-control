#!/bin/bash
# --------------- NorNet -- The Multi-Homing Testbed Project ----------------
#
# Copyright (C) 2012-2022 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

### BEGIN INIT INFO
# Provides:          nornet-node
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: NorNet Node
# Description:       This service provides a NorNet Node.
### END INIT INFO


NAME="nornet-node"
DESC="NorNet Node"
NORNET_DIRECTORY="/etc/nornet"
# NORNET_DIRECTORY=/home/dreibh/src/rn/nornet/nornet-control/src
LOGFILE="/var/log/nornet-node.log"
PATH=$NORNET_DIRECTORY:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ACTION="$1"
shift


# Check whether NorNet directory is existing
if [ ! -e "$NORNET_DIRECTORY" ] ; then
   exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


set -e

cd "$NORNET_DIRECTORY"

# Load configuration from API config file
NorNet_LocalNode_Hostname=""
NorNet_LocalNode_NorNetInterface=""
if [ ! -e ./nornetapi-config ] ; then
   echo >&2 "ERROR: $NORNET_DIRECTORY/nornetapi-config does not exist!"
   exit 0
fi
. ./nornetapi-config
if [ "$NorNet_LocalNode_Hostname" = "" ] ; then
   echo >&2 "ERROR: NorNet_LocalNode_Hostname is not set!"
   exit 1
fi
if [ "$NorNet_LocalNode_NorNetInterface" = "" ] ; then
   echo >&2 "ERROR: NorNet_LocalNode_NorNetInterface is not set!"
   exit 1
fi

# Log what is going on ...
echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: ###### $0 $ACTION $@ ######\x1b[0m"  >>$LOGFILE 2>&1


# ###### Get existing interface configuration (if available) ################
obtain-existing-interface-configuration ()
{
   local inputFile="$1"
   local interface="$2"
   local outputFile="$3"

   local writeMode=0
   while read inputLine ; do
      if [[ $inputLine =~ ^auto([ \t]*)${interface}(:[0-9]*|)([ \t]*)(.*)$ ]] ; then
         echo "$inputLine" >>$outputFile
      else
         # ====== New interface? =========================================
         if [[ $inputLine =~ ^iface([ \t]*)|^([ \t]*)$ ]] ; then
            if [[ $inputLine =~ ^iface([ \t]*)${interface}(:[0-9]*|)([ \t]*)(.*)$ ]] ; then
               writeMode=1
               echo "$inputLine" | sed -e "s/^[ \t][ \t]*/\t/g" >>$outputFile
            else
               if [ $writeMode -eq 1 ] ; then
                  echo "" >>$outputFile
                  writeMode=0
               fi
            fi

         # ====== Write interface configuration ==========================
         elif [ $writeMode -eq 1 ] ; then
            echo -e "\t$inputLine" >>$outputFile
         fi
      fi
   done <$inputFile
}


# ###### Check whether file needs an update #################################
needs_update ()
{
   if [ ! -e "$1" ] ; then
      # There is nothing to update
      return 1
   elif [ "$3" = "-update-all" ] ; then
      # Force renewal of configuration
      return 0
   elif [ ! -e "$2" ] ; then
      # Target does not exist => update needed!
      return 0
   elif ! diff -q "$1" "$2" ; then
      # Target differs => update needed!
      return 0
   fi
   return 1
}


# ###### Get new configuration into temporary directory #####################
get_new_node_configuration ()
{
   echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Getting new configuration ...\x1b[0m"
   rm -rf updated-node-config
   mkdir updated-node-config
   cd updated-node-config

   if [ -e /etc/netplan/nornet.yaml -o -e /etc/netplan/00-installer-config.yaml ] ; then
      echo "Configuring via Netplan!"
      Make-Node-Configuration "$NorNet_LocalNode_Hostname" "$NorNet_LocalNode_NorNetInterface" Netplan

   else
      echo "Configuring via ifupdown!"
      Make-Node-Configuration "$NorNet_LocalNode_Hostname" "$NorNet_LocalNode_NorNetInterface" Debian

      AllDefinedInterfaces=`grep "^[ \t]*auto" /etc/network/interfaces | sed -e "s/\([ \t]*auto[ \t]\)\([a-zA-Z0-9]*\)/\2/g"`
      for interface in $AllDefinedInterfaces ; do
         if [ "$interface" != "lo" -a "$interface" != "$NorNet_LocalNode_NorNetInterface" ] ; then
            echo -e "\n# ====== Additional Interface $interface ======" >>interfaces
            obtain-existing-interface-configuration /etc/network/interfaces $interface interfaces
         fi
      done
   fi

   cd ..

   # ====== Apply firewall update ===========================================
   rm -f firewall4-config firewall6-config
   if [ -e updated-node-config/firewall4-config ] ; then
      mv updated-node-config/firewall4-config .
   fi
   if [ -e updated-node-config/firewall6-config ] ; then
      mv updated-node-config/firewall6-config .
   fi
   needsFirewallUpdate=0
   if needs_update firewall4-config /etc/iptables/rules.v4 $1 ; then
      cp firewall4-config /etc/iptables/rules.v4
      needsFirewallUpdate=1
   fi
   if needs_update firewall6-config /etc/iptables/rules.v6 $1 ; then
      cp firewall6-config /etc/iptables/rules.v6
      needsFirewallUpdate=1
   fi
   if [ $needsFirewallUpdate -ne 0 ] ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Firewall configuration has been updated => restarting netfilter-persistent service ...\x1b[0m"
      if [ -e /etc/init.d/netfilter-persistent ] ; then
         service netfilter-persistent restart >/dev/null || true
      elif [ -e /etc/init.d/iptables-persistent ] ; then
         service iptables-persistent restart >/dev/null || true
      else
         echo "ERROR: What is the name of the netfilter-persistent service?"
      fi
   fi

   # ====== Update other configurations =====================================
   mv updated-node-config/* .
   rmdir updated-node-config
}


# ###### Check configuration for updates and apply if necessary #############
check_and_configure ()
{
   get_new_node_configuration

   if needs_update nornet.yaml /etc/netplan/nornet.yaml $1 ; then
      if [ ! -e /etc/init.d/nornet-tunnelbox ] ; then
         echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Interface configuration has been updated => running netplan ...\x1b[0m"
         cp nornet.yaml /etc/network/interfaces
         netplan apply || true
      else
         echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: ##### WARNING: nornet-node is supposed to install new /etc/netplan/nornet.yaml on tunnelbox?! ######\x1b[0m"
         echo "/etc/netplan/nornet.yaml will be kept as is!"
      fi
   elif needs_update interfaces /etc/network/interfaces $1 ; then
      if [ ! -e /etc/init.d/nornet-tunnelbox ] ; then
         echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Interface configuration has been updated => restarting networking service ...\x1b[0m"
         cp interfaces /etc/network/interfaces
         service networking restart >/dev/null 2>&1 || true
      else
         echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: ##### WARNING: nornet-node is supposed to install new /etc/network/interfaces on tunnelbox?! ######\x1b[0m"
         echo "/etc/network/interfaces will be kept as is!"
      fi
   fi
   if needs_update hostname-config /etc/hostname $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Hostname has been updated => setting new hostname ...\x1b[0m"
      cp hostname-config /etc/hostname
      hostname `cat /etc/hostname`
   fi
   if needs_update hosts-config /etc/hosts $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: Hosts file has been updated => installing it ...\x1b[0m"
      cp hosts-config /etc/hosts
   fi
   if needs_update sysctl-config /etc/sysctl.d/90-nornet.conf $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: SysCtl file has been updated => installing it ...\x1b[0m"
      cp sysctl-config /etc/sysctl.d/90-nornet.conf
      sudo sysctl -q -f /etc/sysctl.d/90-nornet.conf || true
   fi
   if needs_update ntp-config /etc/ntp.conf $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: NTP configuration has been updated => restarting NTP service ...\x1b[0m"
      cp ntp-config /etc/ntp.conf
      service ntp restart >/dev/null || true
   fi
   if needs_update snmpd-config /etc/snmp/snmpd.conf $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: SNMP configuration has been updated => restarting SNMP service ...\x1b[0m"
      cp snmpd-config /etc/snmp/snmpd.conf
      service snmpd restart >/dev/null || true
   fi
   if needs_update auto.nfs /etc/auto.nfs $1 ; then
      echo -e "\x1b[33m`env LANG=C date +%FT%H:%M:%S`: AutoFS configuration has been updated => restarting AutoFS service ...\x1b[0m"
      find /etc -maxdepth 1 -name "auto.*" -type f | xargs rm -r -f
      cp auto.* /etc
      service autofs restart >/dev/null || true
   fi
   cp proxy.sh proxy.csh /etc/profile.d/
   cp apt-proxy /etc/apt/apt.conf.d/10-proxy

   # Permanently make important settings in sysctl configuration.
   sed -e "s/^[ \t]*[#]*[ \t]*net.ipv4.conf.all.accept_redirects[ \t]*=.*$/net.ipv4.conf.all.accept_redirects=0/" \
       -e "s/^[ \t]*[#]*[ \t]*net.ipv4.conf.all.secure_redirects[ \t]*=.*$/net.ipv4.conf.all.secure_redirects=0/" \
       -e "s/^[ \t]*[#]*[ \t]*net.ipv6.conf.all.accept_redirects[ \t]*=.*$/net.ipv6.conf.all.accept_redirects=0/" \
       </etc/sysctl.conf >/etc/nornet/sysctl-config && mv /etc/nornet/sysctl-config /etc/sysctl.conf && sudo sysctl -q -p
}


# ###### Main program #######################################################
case "$ACTION" in
  start|stop|restart)
     #echo -n "Starting $DESC: "
     #echo "$NAME."
     ;;
  force-reload)
     ;;
  configure)
     rm -f interfaces hosts-config hostname-config ntp-config snmpd-config auto.*
     # All configuration files are gone. The tests below will trigger update.
     check_and_configure -update-all >>$LOGFILE 2>&1
     ;;
  check-and-configure)
     # Compare with existing configuration, update only if necessary.
     check_and_configure >>$LOGFILE 2>&1
     ;;
  status)
     ;;
  *)
     N=/etc/init.d/$NAME
     echo "Usage: $N {start|stop|restart|force-reload|configure|check-and-configure|status}" >&2
     exit 1
     ;;
esac

exit 0
