#!/bin/bash
# --------------- NorNet -- The Multi-Homing Testbed Project ----------------
#
# Copyright (C) 2012-2022 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

### BEGIN INIT INFO
# Provides:          nornet-monitor
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: NorNet Node
# Description:       This service provides a NorNet Node.
### END INIT INFO


NAME="nornet-monitor"
DESC="NorNet Monitor"
NORNET_DIRECTORY="/etc/nornet"
# NORNET_DIRECTORY=/home/dreibh/src/rn/nornet/nornet-control/src
LOGFILE="/var/log/nornet-monitor.log"
PATH=$NORNET_DIRECTORY:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ACTION="$1"
shift


# Check whether NorNet directory is existing
if [ ! -e "$NORNET_DIRECTORY" ] ; then
   exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


set -e

cd "$NORNET_DIRECTORY"

# Load configuration from API config file
NorNet_LocalNode_Hostname=""
NorNet_LocalNode_NorNetInterface=""
if [ ! -e ./nornetapi-config ] ; then
   echo >&2 "ERROR: $NORNET_DIRECTORY/nornetapi-config does not exist!"
   exit 0
fi
. ./nornetapi-config
if [ "$NorNet_LocalNode_Hostname" = "" ] ; then
   echo >&2 "ERROR: NorNet_LocalNode_Hostname is not set!"
   exit 1
fi
if [ "$NorNet_LocalNode_NorNetInterface" = "" ] ; then
   echo >&2 "ERROR: NorNet_LocalNode_NorNetInterface is not set!"
   exit 1
fi

# Log what is going on ...
echo -e "\x1b[32m`env LANG=C date +%FT%H:%M:%S`: ###### $0 $ACTION $@ ######\x1b[0m"  >>$LOGFILE 2>&1


# ###### Check whether file needs an update #################################
needs_update ()
{
   if [ ! -e "$1" ] ; then
      # There is nothing to update
      return 1
   elif [ "$3" = "-update-all" ] ; then
      # Force renewal of configuration
      return 0
   elif [ ! -e "$2" ] ; then
      # Target does not exist => update needed!
      return 0
   elif ! diff -q "$1" "$2" ; then
      # Target differs => update needed!
      return 0
   fi
   return 1
}


# ###### Get new configuration into temporary directory #####################
get_new_monitor_configuration ()
{
   echo -e "\x1b[32m`env LANG=C date +%FT%H:%M:%S`: Getting new configuration ...\x1b[0m"
   rm -rf updated-monitor-config
   mkdir updated-monitor-config
   cd updated-monitor-config
   Make-Monitor-Configuration
   cd ..
   mv updated-monitor-config/* .
   rmdir updated-monitor-config
}


# ###### Check configuration for updates and apply if necessary #############
check_and_configure ()
{
   get_new_monitor_configuration
   if needs_update nagios-config /etc/nornet/nornet-testbed.cfg $1 ; then
      echo -e "\x1b[32m`env LANG=C date +%FT%H:%M:%S`: Nagios configuration has been updated => restarting Nagios service ...\x1b[0m"
      cp nagios-config /etc/nornet/nornet-testbed.cfg
      service nagios  reload >/dev/null || true   # "reload" is sufficient here => faster!
      service nagios3 reload >/dev/null || true   # "reload" is sufficient here => faster!
      service nagios4 reload >/dev/null || true   # "reload" is sufficient here => faster!
   fi
}


# ###### Main program #######################################################
case "$ACTION" in
  start|stop|restart)
     #echo -n "Starting $DESC: "
     #echo "$NAME."
     ;;
  force-reload)
     ;;
  configure)
     rm -f nagios-config
     # All configuration files are gone. The tests below will trigger update.
     check_and_configure -update-all >>$LOGFILE
     ;;
  check-and-configure)
     # Compare with existing configuration, update only if necessary.
     check_and_configure >>$LOGFILE
     ;;
  status)
     ;;
  *)
     N=/etc/init.d/$NAME
     echo "Usage: $N {start|stop|restart|force-reload|configure|check-and-configure|status}" >&2
     exit 1
     ;;
esac

exit 0
