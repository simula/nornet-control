#!/usr/bin/env bash
#
# Build Ubuntu kernel package using Docker
# Copyright (C) 2022 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

# Bash options:
set -e


if [ $# -lt 2 ] ; then
   echo >&2 "Usage: $0 image container_name"
   echo >&2 "Example: $0 dreibh/nornet-ubuntu:22.04 jammy"
   exit 1
fi

IMAGE="$1"
CONTAINER="$2"
BUILD_DIRECTORY="${CONTAINER}"
RESULTS_DIRECTORY="packages/${CONTAINER}"

CONFIG_SYSTEM="/boot/config-`uname -r`"
CONFIG_CUSTOM="${HOME}/src/nornet/planetlab-kernel/config-planetlab"


# ====== Build ==============================================================
docker rm -f ${CONTAINER} >/dev/null 2>&1 || true

# ------ Rsync sources ------------------------------------------------------
echo "RSync'ing sources ..."
echo "rsync -a --delete --exclude .git ${HOME}/src/multipath/mptcp-kernel/ ${BUILD_DIRECTORY}/"
rsync -a --delete --exclude .git ${HOME}/src/multipath/mptcp-kernel/ ${BUILD_DIRECTORY}/
pushd ${BUILD_DIRECTORY} >/dev/null
if grep -q IPPROTO_MPTCP tools/include/uapi/linux/in.h ; then
   LOCALVERSION="-mptcp-upstream-${CONTAINER}"
else
   LOCALVERSION="-mptcp-offtree-${CONTAINER}"
fi
echo "LOCALVERSION=${LOCALVERSION}"
popd >/dev/null

# ------ Mark kernel as "offtree" (development) or "next" (mainline) --------
if grep -q -E "^#define MPTCP_VERSION_0" include/net/mptcp.h ; then
   LOCALVERSION="${LOCALVERSION}-offtree"
else
   LOCALVERSION="${LOCALVERSION}-next"
fi

# ------ Remove old packages ------------------------------------------------
echo "Removing old results ..."
mkdir -p ${RESULTS_DIRECTORY}
rm -f ${RESULTS_DIRECTORY}/*

# ------ Build kernel packages in container ---------------------------------
echo "Staring build ..."
docker run --rm -i --name ${CONTAINER} \
   --volume `realpath ${BUILD_DIRECTORY}`:/home/nornetpp/src/mptcp-kernel \
   --volume `realpath ${RESULTS_DIRECTORY}`:/results \
   --volume ${CONFIG_SYSTEM}:/home/nornetpp/system.config \
   --volume ${CONFIG_CUSTOM}:/home/nornetpp/custom.config \
   ${IMAGE} \
   bash -c "\
cd /home/nornetpp/src/mptcp-kernel && \
apt update && \
env DEBIAN_FRONTEND=noninteractive apt install -y bc bison cpio devscripts dwarves flex kmod libelf-dev libssl-dev make rsync && \
sudo -u nornetpp -g nornetpp cat /home/nornetpp/system.config /home/nornetpp/custom.config >.config && \
if [ \"\`lsb_release -cs\`\" == \"xenial\" -o \"\`lsb_release -cs\`\" == \"buster\" ] ; then echo \"CONFIG_DEBUG_INFO_BTF=n\" >>.config ; fi && \
sudo -u nornetpp -g nornetpp make config </dev/null >/dev/null 2>&1 && \
sudo -u nornetpp -g nornetpp env MAKEFLAGS="${MAKEFLAGS}" make deb-pkg LOCALVERSION=\"${LOCALVERSION}\" && \
find .. \
   -mindepth 1 -maxdepth 1 \
   -name \"linux-*.deb\" -or \
   -name \"linux-*.dsc\" -or \
   -name \"linux-*.orig.tar.*\" -or  \
   -name \"linux-*.diff.*\" -or \
   -name \"linux-*.changes\" -or \
   -name \"linux-*.buildinfo\" | xargs -n1 -iยง sudo -u nornetpp -g nornetpp mv ยง /results/ && \
true"

# sudo -u nornetpp -g nornetpp cat /home/nornetpp/system.config /home/nornetpp/custom.config >.config
# sudo -u nornetpp -g nornetpp make config </dev/null >/dev/null 2>&1
# sudo -u nornetpp -g nornetpp env MAKEFLAGS="-j8" make deb-pkg LOCALVERSION="-mptcp"
# sudo -u nornetpp -g nornetpp mv ../linux-*.deb ../linux-*.dsc ../linux-*.orig.tar.* ../linux-*.diff.* ../linux-*.changes ../linux-*.buildinfo /results/
