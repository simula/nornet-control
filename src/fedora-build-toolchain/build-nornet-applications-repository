#!/usr/bin/env bash
#
# Build NorNet Applications Repository
# Copyright (C) 2013-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

# Bash options:
set -e

# !!!!! Needed when running with "sudo"! !!!!!
HOME="/home/nornetpp"

SOURCES="$HOME/src"
REPOSITORIES="$HOME/repos/nornet-applications"
FEDORAS="29 25"   # rawhide
ARCHS="x86_64"  # i386"

DISTRIBUTIONS=""
for fedora in $FEDORAS ; do
   for arch in $ARCHS ; do
      DISTRIBUTIONS="fedora-$fedora-$arch $DISTRIBUTIONS"
   done
done

#PACKAGES="libusrsctp libneat"
PACKAGES="nornet_nn bibtexconv fractgen netperfmeter hipercontracer rsplib subnetcalc tsctp"


# ====== NorNet-NN ========================================
nornet_nn_DIR="nornet-nn"
nornet_nn_REPO="git://github.com/dreibh/nornet-nn.git"

# ====== BibTeXConv =======================================
bibtexconv_DIR="bibtexconv"
bibtexconv_REPO="git://github.com/dreibh/bibtexconv.git"

# ====== Fractal Generator ================================
fractgen_DIR="fractgen"
fractgen_REPO="git://github.com/dreibh/fractgen.git"

# ====== NetPerfMeter =====================================
netperfmeter_DIR="netperfmeter"
netperfmeter_REPO="git://github.com/dreibh/netperfmeter.git"

# ====== HiPerConTracer ===================================
hipercontracer_DIR="hipercontracer"
hipercontracer_REPO="git://github.com/dreibh/hipercontracer.git"

# ====== rsplib ===========================================
rsplib_DIR="rsplib"
rsplib_REPO="git://github.com/dreibh/rsplib.git"

# ====== SubNetCalc =======================================
subnetcalc_DIR="subnetcalc"
subnetcalc_REPO="git://github.com/dreibh/subnetcalc.git"

# ====== TSCTP ============================================
tsctp_DIR="tsctp"
tsctp_REPO="git://github.com/dreibh/tsctp.git"

# ====== libusrsctp =======================================
libusrsctp_DIR="libusrsctp"
#libusrsctp_REPO="git://github.com/dreibh/usrsctp.git@dreibh/rpm-packaging"
libusrsctp_REPO="git://github.com/dreibh/usrsctp.git@dreibh/usrsctpForNeat-packaging"

# ====== libneat =======================================
libneat_DIR="libneat"
libneat_REPO="git://github.com/NEAT-project/neat.git@dreibh/neat-socketapi"

# ====== libvirt ==========================================
# libvirt_DIR="`pwd`/libvirt"

## ====== Tracebox =========================================
#tracebox_DIR="$SOURCES/tracebox"
#
## ====== MPTCP Kernel =====================================
#kernel_DIR="$SOURCES/misc-trunk/mptcp-kernel"


# # ====== cfengine ==========================================
# cfengine_DIR="`pwd`/cfengine"
#
# # ====== transforward =====================================
# transforward_DIR="`pwd`/transforward"
#
# # ====== ipfwroot =========================================
# ipfwroot_DIR="`pwd`/ipfwroot"



# ###### Main program #######################################################

# ====== Handle arguments ===================================================
WORKDIR=`pwd`

# ====== Prepare output directories =========================================
echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Preparing repositories in $REPOSITORIES ...\x1b[0m"
DISTRIBUTION_DIRECTORIES=`echo "$DISTRIBUTIONS" | sed -e "s/-/\//g"`
for directory in $DISTRIBUTION_DIRECTORIES ; do
   mkdir -p "$REPOSITORIES/$directory/RPMS"
   mkdir -p "$REPOSITORIES/$directory/SRPMS"
done


# ====== Packaging loop =====================================================
for package in $PACKAGES ; do
   echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Packaging $package ...\x1b[0m"
   package_dir=""
   eval "package_dir=\$${package}_DIR"
   if [ "$package_dir" == "" ] ; then
      echo >&2 "ERROR: Invalid directory given in ${package}_DIR!"
      exit 1
   fi
   rm -rf "$package_dir"


   # ====== Clone ===========================================================
   eval "package_repo_with_tag=\$${package}_REPO"
   package_repo=`echo "$package_repo_with_tag" | sed -e "s/@.*$//g"`
   package_repo_tag=`echo "$package_repo_with_tag" | sed -e "s/^.*@//g"`
   if [ "$package_repo" == "$package_repo_tag" ] ; then
      package_repo_tag="master"
   fi
   if [ "$package_repo" == "" ] ; then
      echo >&2 "ERROR: Invalid repoectory given in ${package}_REPO!"
      exit 1
   fi
   rm -rf "$package_repo"
   git clone "$package_repo" "$package_dir"


   # ====== Build ===========================================================
   (
      cd "$package_dir"
      git checkout packaging.conf || true
      git checkout $package_repo_tag
      sed -e 's/SKIP_PACKAGE_SIGNING=0/SKIP_PACKAGE_SIGNING=1/g' -i packaging.conf || true

      # ====== Build SRPM ===================================================
      eval "package_dir=\$${package}_DIR"
      echo -e "\x1b[1;32m`date +%FT%H:%M:%S`: Creating RPMs for $package ...\x1b[0m"

      if [ -e ./clean-deb ] ; then
         ./clean-deb
      fi
      ./build-rpm $DISTRIBUTIONS

      # ====== Build RPMs ===================================================
      for distribution in $DISTRIBUTIONS ; do
         rpms=`find /var/lib/mock/$distribution/result -name "${package_dir}*.rpm" || true`
         if [ "$rpms" == "" ] ; then
            echo >&2 "ERROR: Cannot find RPMs for package $package in /var/lib/mock/$distribution/result!"
            exit 1
         fi
         directory=`echo "$distribution" | sed -e "s/-/\//g"`
         for rpm in $rpms ; do
            if [[ "$rpm" =~ \.src\.rpm$ ]] ; then
               echo "S=$rpm"
               cp "$rpm" "$REPOSITORIES/$directory/SRPMS/"
            else
               echo "B=$rpm"
               cp "$rpm" "$REPOSITORIES/$directory/RPMS/"
            fi
         done
      done

   )
done

cd "$WORKDIR"


# ====== Make groups ========================================================
# ./make-nornet-groups


# ====== Update repository management files =================================
echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Updating repositories ...\x1b[0m"
for directory in $DISTRIBUTION_DIRECTORIES ; do
   cp nornet-groups.xml "$REPOSITORIES/$directory"

   oldPackages=`repomanage --keep=2 --old "$REPOSITORIES/$directory"`
   for oldPackage in $oldPackages ; do
      echo "Removing $oldPackage"
      rm -rf "$oldPackage"
   done
   if [ -e "$REPOSITORIES/$directory/repodata/" ] ; then
      rm -rf "$REPOSITORIES/$directory/repodata/"
   fi
   createrepo -g "$REPOSITORIES/$directory/nornet-groups.xml" "$REPOSITORIES/$directory"
done
tree $REPOSITORIES/


echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Successfully completed package creation!\x1b[0m"
