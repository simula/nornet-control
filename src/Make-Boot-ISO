#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# NorNet Node Setup
# Copyright (C) 2012-2022 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import sys
import base64

# Needs package python-ipaddr (Fedora Core, Ubuntu, Debian)!
from ipaddress import ip_address, ip_interface, IPv4Address, IPv4Interface, IPv6Address, IPv6Interface

# NorNet
from NorNetTools         import *
from NorNetAPI           import *
from NorNetProviderSetup import *


# ###### Download ISO image #################################################
def getBootISO(node, isoDirectory):
   nodeID   = node['node_id']
   nodeName = node['node_name']
   isoName  = os.path.normpath(os.path.join(isoDirectory, nodeName + '.iso'))
   if not os.path.exists(isoName):
      log('Downloading ' + isoName + ' ...')
      try:
         isoBase64 = getPLCServer().GetBootMedium(getPLCAuthentication(), nodeID, 'node-iso' , '', [])
         iso       = base64.b64decode(isoBase64)

         # In any case, this node now needs a reinstall!
         getPLCServer().UpdateNode(getPLCAuthentication(), nodeID,
            { 'boot_state' : 'reinstall' })

         outputFile = open(isoName, 'wb')
         outputFile.write(iso)
         outputFile.close()
      except Exception as e:
         error('Unable to generate ' + isoName + ': ' + str(e))

   else:
      log('Not downloading ' + isoName + ', it already exists!')


# ###### Main program #######################################################
userName     = None
isoDirectory = '.'
nodeList     = []
useAllNodes  = False

if len(sys.argv) < 2:
   error('Usage: ' + sys.argv[0] + ' [--user=user] [--directory=ISO directory] node_name|ALL ...')
for i in range(1, len(sys.argv)):
   match = re.search('^--([a-z]*)=(.*)', sys.argv[i])
   if match != None:
      if match.group(1) == 'user':
         userName = match.group(2)
      elif match.group(1) == 'directory':
         isoDirectory = match.group(2)
      else:
        error('Invalid option parameter: ' + sys.argv[i])
   else:
      nodeName = sys.argv[i]
      if nodeName == 'ALL':
         useAllNodes = True
      else:
         nodeList.append(nodeName)


log('***** Welcome to NorNet! *****')
loginToPLC(userName)

if useAllNodes == True:
   allNodes = fetchNorNetNodeList()
   for node in allNodes:
      getBootISO(node, isoDirectory)
else:
   for nodeName in nodeList:
      node = fetchNorNetNode(nodeName)
      if node != None:
         getBootISO(node, isoDirectory)
      else:
         error('Unknown node ' + nodeName + '!')
