#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# NorNet Test Setup
# Copyright (C) 2012-2022 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import re
import os
import base64

from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface

# NorNet
from NorNetTools         import *
from NorNetAPI           import *
from NorNetProviderSetup import *
from NorNetSiteSetup     import *


norNetSetup = [

 { 'site_index'        : 1,
   'site_enabled'      : True,
   'site_long_name'    : u'Alpha Site',
   'site_short_name'   : 'AS',
   'site_url'          : 'http://www.alpha.test',
   'site_domain'       : 'alpha.test',
   'site_city'         : 'Fornebu',
   'site_province'     : 'Akershus',
   'site_country'      : 'Norge',
   'site_country_code' : 'NO',
   'site_latitude'     : 59.895933,
   'site_longitude'    : 10.627635,
   'site_altitude'     : 15,
   'site_contacts'     : [ u'Nordmann, Ola: ola.nordmann@alpha.test' ],
   'site_pcu'          : [ IPv4Address('172.16.1.201'), 'pcu-root', 'a-secret-password' ],
   'site_nornet_if'    : 'eth0',
   'site_providers' : [
      [ u'Provider Eins', 'eth1', IPv4Interface('172.16.1.2/24'),     IPv4Address('172.16.1.1'),
                                  IPv6Interface('fd00:16:1::2/64'),   IPv6Address('fd00:16:1::1'),
                                  1500, 'fibre, business', 0, 0 ],
      [ u'Provider Zwei', 'eth2', IPv4Interface('172.17.1.2/24'),     IPv4Address('172.17.1.1'),
                                  IPv6Interface('fd00:17:1::2/64'),   IPv6Address('fd00:17:1::1'),
                                  1500, 'fibre, business', 0, 0 ]
   ],
   'site_nodes' : [
      [ 100, 1, u'rekesmørbrød', '', 'physical' ],
      [ 101, 2, u'pinnekjøtt',   '', 'physical' ]
   ] },

 { 'site_index'        : 2,
   'site_enabled'      : True,
   'site_long_name'    : u'Beta Site',
   'site_short_name'   : 'BS',
   'site_url'          : 'http://www.beta.test',
   'site_domain'       : 'beta.test',
   'site_city'         : 'Stockholm',
   'site_province'     : 'Stockholms län',
   'site_country'      : 'Sverige',
   'site_country_code' : 'SE',
   'site_latitude'     : 59.329952,
   'site_longitude'    : 18.072383,
   'site_altitude'     : 5,
   'site_contacts'     : [ u'Gustavsson, Gösta: goesta.gustavsson@beta.test' ],
   'site_pcu'          : [ IPv4Address('172.16.1.202'), 'pcu-root', 'a-secret-password' ],
   'site_nornet_if'    : 'eth0',
   'site_providers' : [
      [ u'Provider Eins', 'eth1', IPv4Interface('172.16.2.2/24'),     IPv4Address('172.16.2.1'),
                                  IPv6Interface('fd00:16:2::2/64'),   IPv6Address('fd00:16:2::1'),
                                  1500, 'fibre, business', 0, 0 ],
      [ u'Provider Zwei', 'eth2', IPv4Interface('172.17.2.2/24'),     IPv4Address('172.17.2.1'),
                                  IPv6Interface('fd00:17:2::2/64'),   IPv6Address('fd00:17:2::1'),
                                  1500, 'fibre, business', 0, 0 ]
   ],
   'site_nodes' : [
      [ 100, 1, u'knäckebröd',   '', 'physical' ],
      [ 101, 2, u'smörgåstårta', '', 'physical' ]
   ] },

 { 'site_index'        : 3,
   'site_enabled'      : True,
   'site_long_name'    : u'Gamma Site',
   'site_short_name'   : 'CS',
   'site_url'          : 'http://www.gamma.test',
   'site_domain'       : 'gamma.test',
   'site_city'         : 'Forst',
   'site_province'     : 'Nordrhein-Westfalen',
   'site_country'      : 'Deutschland',
   'site_country_code' : 'DD',
   'site_latitude'     : 50.971672,
   'site_longitude'    : 7.468232,
   'site_altitude'     : 220,
   'site_contacts'     : [ ],   # u'托马斯博士: thomas@gamma.test'
   'site_pcu'          : [ IPv4Address('172.16.1.203'), 'pcu-root', 'a-secret-password' ],
   'site_nornet_if'    : 'eth0',
   'site_providers' : [
      [ u'Provider Eins', 'eth1', IPv4Interface('172.16.3.2/24'),     IPv4Address('172.16.3.1'),
                                  IPv6Interface('fd00:16:3::2/64'),   IPv6Address('fd00:16:3::1'),
                                  1500, 'fibre, business', 0, 0 ],
      [ u'Provider Zwei', 'eth2', IPv4Interface('172.17.3.2/24'),     IPv4Address('172.17.3.1'),
                                  # IPv6Interface('fd00:17:3::2/64'),   IPv6Address('fd00:17:3::1') ]
                                  IPv6Interface('::/0'),  IPv6Address('::'),
                                  1492, 'adsl, consumer', 3000, 384 ]
   ],
   'site_nodes' : [
      [ 100, 1, u'weißbier' ],
      [ 101, 2, u'kölsch'   ]
   ] },

 { 'site_index'        : 4,
   'site_enabled'      : True,
   'site_long_name'    : u'Delta Site',
   'site_short_name'   : 'DS',
   'site_url'          : 'http://www.delta.test',
   'site_domain'       : 'delta.test',
   'site_city'         : 'Gembrook',
   'site_province'     : 'Victoria',
   'site_country'      : 'Australia',
   'site_country_code' : 'AU',
   'site_latitude'     : -37.951706,
   'site_longitude'    : 145.549149,
   'site_altitude'     : 200,
   'site_contacts'     : [ u'Smith, John: john.smith@delta.test', 'Admin, Joe: joe.admin@delta.test' ],
   'site_pcu'          : [ IPv4Address('172.16.1.204'), 'pcu-root', 'a-secret-password' ],
   'site_nornet_if'    : 'eth0',
   'site_providers' : [
      [ u'Provider Eins', 'eth1', IPv4Interface('172.16.4.2/24'),     IPv4Address('172.16.4.1'),
                                  IPv6Interface('fd00:16:4::2/64'),   IPv6Address('fd00:16:4::1'),
                                  1500, 'fibre, business', 0, 0 ]
      #,
      #[ u'Provider Zwei', 'eth2', IPv4Interface('172.17.4.2/24'),     IPv4Address('172.17.4.1'),
                                  # IPv6Interface('fd00:17:4::2/64'),   IPv6Address('fd00:17:4::1') ]
                                  #IPv6Interface('::/0'),  IPv6Address('::'),
                                  #1500, 'fibre, consumer', 100000, 20000 ]
      #,
      #[ u'Provider Drei', 'eth3', IPv4Interface('172.18.4.2/24'),     IPv4Address('172.18.4.1'),
                                  #IPv6Interface('fd00:18:4::2/64'),   IPv6Address('fd00:18:4::1'),
                                  #1500, 'fibre, consumer', 100000, 20000 ]
   ],
   'site_nodes' : [
      [ 100, 1, u'kangaroo', 'belgrave.delta.test', 'vnc://belgrave..delta.test:5700' ],
      [ 101, 2, u'wombat',   'belgrave.delta.test', 'vnc://belgrave..delta.test:5701' ],
      [ 103, 3, u'wallaby',  'emerald.delta.test',  'vnc://emerald..delta.test:5700'  ],
      [ 104, 4, u'koala',    'emerald.delta.test',  'vnc://emerald..delta.test:5701'  ],
      [ 105, 5, u'redback',  'lakeside.delta.test', 'vnc://lakeside..delta.test:5700' ],
      [ 106, 6, u'quokka',   'lakeside.delta.test', 'vnc://lakeside..delta.test:5701' ]
   ] },

 { 'site_index'        : 5,
   'site_enabled'      : False,
   'site_long_name'    : u'Epsilon Site',
   'site_short_name'   : 'ES',
   'site_url'          : 'http://www.epsilon.test',
   'site_domain'       : 'epsilon.test',
   'site_city'         : 'Fukuoka',
   'site_province'     : 'Fukuoka Prefecture',
   'site_country'      : 'Japan',
   'site_country_code' : 'JP',
   'site_latitude'     : 36.6730,
   'site_longitude'    : 136.6544,
   'site_altitude'     : 10,
   'site_contacts'     : [ u'Smith, John: john.smith@epsilon.test', 'Admin, Joe: joe.admin@epsilon.test' ],
   'site_pcu'          : [ IPv4Address('172.16.1.205'), 'pcu-root', 'a-secret-password' ],
   'site_nornet_if'    : 'eth0',
   'site_providers' : [
      [ u'Provider Eins', 'eth1', IPv4Interface('172.16.5.2/24'),     IPv4Address('172.16.5.1'),
                                  IPv6Interface('fd00:16:5::2/64'),   IPv6Address('fd00:16:5::1'),
                                  1500, 'fibre, business', 0, 0 ]
   ],
   'site_nodes' : [
      [ 100, 1, u'test1', 'sushi.epsilon.test', 'vnc://sushi.epsilon.test:5700' ],
      [ 101, 2, u'test2', 'sushi.epsilon.test', 'vnc://sushi.epsilon.test:5701' ],
   ] },

]


# ###### Remove site ########################################################
def removeSite(site):
   if site == None:
      fullSiteList = fetchNorNetSiteList()
      if fullSiteList != None:
         for siteIndex in fullSiteList:
            site = fullSiteList[siteIndex]
            removeNorNetSite(site['site_long_name'])
   else:
      siteName = makeNameFromUnicode(site['site_long_name'], False)['ascii']
      removeNorNetSite(siteName)


# ###### Add site ###########################################################
def makeSite(fullSliceList, site, norNetInformation, ntpServers):
   # ====== Add tag types ===================================================
   makeNorNetTagTypes()

   # ====== Make site ========================================================
   siteIndex = site['site_index']

   newSite = makeNorNetSite(site['site_long_name'], site['site_short_name'], site['site_enabled'],
                            str.lower(site['site_short_name']),
                            site['site_url'], site['site_domain'], siteIndex,
                            site['site_city'], site['site_province'], site['site_country'], site['site_country_code'],
                            site['site_latitude'], site['site_longitude'], site['site_altitude'],
                            site['site_contacts'],
                            site['site_providers'], site['site_providers'][0][0], site['site_nornet_if'],
                            ntpServers)
   newPCU = makeNorNetPCU(newSite, 'pcu', site['site_domain'],
                          site['site_pcu'][0], site['site_pcu'][1], site['site_pcu'][2],
                          'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   # ====== Make nodes ======================================================
   i = 100
   for node in site['site_nodes']:
      address = node[0]
      if address <= 0:
         address = i
      port = node[1]
      if port <= 0:
        port = i
      try:
         machineHost    = node[3]
         machineDisplay = node[4]
      except:
         machineHost    = ''
         machineDisplay = 'physical'
      makeNorNetNode(fullSliceList, newSite, node[2], address, newPCU, port,
                     'eth0', 'Amiga 5000', 'boot', machineHost, machineDisplay)


# ###### Make test setup ####################################################
def getBootISOs(isoDirectory):
   allNorNetNodes = fetchNorNetNodeList()
   for node in allNorNetNodes:
      nodeID   = node['node_id']
      nodeName = node['node_name']
      isoName  = os.path.normpath(os.path.join(isoDirectory, nodeName + '.iso'))
      if not os.path.exists(isoName):
         log('Downloading ' + isoName + ' ...')
         try:
            isoBase64 = getPLCServer().GetBootMedium(getPLCAuthentication(), nodeID, 'node-iso' , '', [])
            iso       = base64.b64decode(isoBase64)
            outputFile = open(isoName, 'w')
            outputFile.write(iso)
            outputFile.close()
         except:
            error('Unable to generate ' + isoName + '!')

      else:
         log('Not downloading ' + isoName + ', it already exists!')


# ###### Perform site action ################################################
def performAction(fullSliceList, action, site):
   if ((action == 'remove') or (action == 'renew')):
      removeSite(site)
   if ((action == 'add') or (action == 'renew')):
      makeSite(fullSliceList, site, norNetInformation, ntpServers)



# ###### Main program #######################################################
action = ''
if len(sys.argv) > 2:
   if sys.argv[1] == 'add':
      action = 'add'
   elif sys.argv[1] == 'renew':
      action = 'renew'
   elif sys.argv[1] == 'remove':
      action = 'remove'
   elif sys.argv[1] == 'manage':
      action = 'manage'
if action == '':
   error('Usage: ' + sys.argv[0] + ' add|renew|remove|manage Site|ALL [Site] ... [--user=user_name] [--slice=slice_name]')


log('***** Welcome to NorNet! *****')
loginToPLC()

fullSliceList = fetchNorNetSliceList()


# ====== Some server settings ===============================================
norNetInformation = getMyNorNetInformation()
ntpServerNames = [ 'ntp1.ptb.de', 'ntp2.ptb.de', 'ntp3.ptb.de',   # The PTB servers (very reliable sources)
                   'ntp1.uio.no', 'ntp2.uio.no' ]                 # UiO (nearby)

ntpServers = []
for ntpServer in ntpServerNames:
   ntpAddress = resolveHostname(ntpServer, AF_INET6)
   if ntpAddress != None:
      ntpServers.append(ntpAddress)
   ntpAddress = resolveHostname(ntpServer, AF_INET)
   if ntpAddress != None:
      ntpServers.append(ntpAddress)
# ===========================================================================


# ====== Add tag types ======================================================
if ((action == 'add') or (action == 'renew')):
   makeNorNetTagTypes()


# ====== Remove or create sites =============================================
if str.upper(sys.argv[2]) == 'ALL':
   if ((action == 'remove') or (action == 'renew')):
      removeSite(None)
   if action != 'remove':
      for site in norNetSetup:
         performAction(fullSliceList, action, site)
   i = 3
else:
   i = 2

userID       = 0
sliceID      = 0
isoDirectory = None
while i < len(sys.argv):
   match = re.search('^--([a-z]*)=(.*)', sys.argv[i])
   if ((match != None) and (match.group(1) == 'user')):
      userName = match.group(2)
      userID   = lookupPersonID(userName)
      if userID == 0:
         error('Unable to find user ' + userName + '\n')

   elif ((match != None) and (match.group(1) == 'slice')):
      sliceName = match.group(2)
      sliceID   = lookupSliceID(sliceName)
      if sliceID == 0:
         error('Unable to find slice ' + sliceName + '\n')

   elif ((match != None) and (match.group(1) == 'isodirectory')):
      isoDirectory = match.group(2)

   else:
      found = None
      for site in norNetSetup:
         if ((site['site_long_name'] == sys.argv[i]) or
             (site['site_short_name'] == sys.argv[i])):
            found = site
            break
      if found == None:
         error('Site "' + sys.argv[i] + '" is not defined!')
      performAction(fullSliceList, action, found)

   i = i + 1


# ====== Set user ===========================================================
if userID != 0:
   log('Adding user to all sites ...')
   # ====== Add user to all sites ===========================================
   allNorNetSites = fetchNorNetSiteList(False)
   for siteIndex in allNorNetSites:
      site = allNorNetSites[siteIndex]
      getPLCServer().AddPersonToSite(getPLCAuthentication(), userID, site['site_id'])
      if site['site_id'] == NorNet_SiteIndex_Central:
         getPLCServer().SetPersonPrimarySite(getPLCAuthentication(), userID, site['site_id'])

# ====== Set slice ==========================================================
if sliceID != 0:
   log('Adding slice to all nodes ...')
   # ====== Add slice to all nodes ==========================================
   nodeIDs = []
   allNorNetNodes = fetchNorNetNodeList()
   for node in allNorNetNodes:
      nodeIDs.append(int(node['node_id']))
   getPLCServer().AddSliceToNodes(getPLCAuthentication(), sliceID, nodeIDs)

# ====== Get boot ISOs ======================================================
if isoDirectory != None:
   getBootISOs(isoDirectory)
