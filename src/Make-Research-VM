#!/usr/bin/env bash
#
# Make Research VM
# Copyright (C) 2012-2022 by Thomas Dreibholz <dreibh@simula.no>
# Copyright (C) 2014 by Forough Golkar <forough.golkar87@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -e


if [ $# -lt 4 ] ; then
   echo >&2 "Usage: $0 VM_name ISO_name memory_MiB disk_GiB [fixed|standard]"
   exit 1
fi

NORNET_DIRECTORY="/etc/nornet"

# ====== Get NorNet parameters ==============================================
if [ -e $NORNET_DIRECTORY/nornetapi-config ] ; then
   . $NORNET_DIRECTORY/nornetapi-config
elif [ -e ./nornetapi-config ] ; then
   . ./nornetapi-config
fi
if [ "$NorNet_LocalNode_NorNetUser" = "" ] ; then
   NorNet_LocalNode_NorNetUser="nornetpp"
fi

# ====== Get command-line parameters ========================================
VM_NAME="$1"
ISO_NAME="$2"
if [ ! -e "$ISO_NAME" ] ; then
   echo >&2 "ERROR: ISO file $ISO_NAME does not exist!"
   exit 1
fi
let MEMORY_SIZE=1*$3
let DISK_SIZE=1024*$4
VARIANT="$5"
if [ "$VARIANT" = "" ] ; then
   VARIANT="fixed"
elif [ "$VARIANT" = "fixed" -o "$VARIANT" = "Fixed" ] ; then
   VARIANT="fixed"
elif [ "$VARIANT" = "standard" -o "$VARIANT" = "Standard" ] ; then
   VARIANT="standard"
else
   echo >&2 "ERROR: Bad disk variant $VARIANT!"
   exit 1
fi

CPUS="1"
VRAM="16"
DISK_OPTIONS="--nonrotational on --discard on"

if [ "$NorNet_Server_VirtualizationSystem" = "" -o "$NorNet_Server_VirtualizationSystem" = "VirtualBox" ] ; then
   VBoxManage unregistervm "$VM_NAME" --delete || true

   VBoxManage createvm --register --name "$VM_NAME" --ostype Fedora_64
   VBoxManage modifyvm "$VM_NAME" --cpus "$CPUS" \
                                 --memory "$MEMORY_SIZE" --vram "$VRAM" \
                                 --audio none \
                                 --rtcuseutc on --firmware bios --chipset piix3 --acpi on --ioapic on \
                                 --hwvirtex on --pae on --boot1 dvd --boot2 disk --boot3 none --boot4 none
   VBoxManage modifyvm "$VM_NAME" --nic1 bridged --nictype1 virtio --bridgeadapter1 eth0 \
                                  --cableconnected1 on --macaddress1 auto --nicpromisc1 allow-all
   VBoxManage storagectl "$VM_NAME" --name "Storage Controller" --add sata --portcount 4
   VBoxManage storageattach "$VM_NAME" --storagectl "Storage Controller" --port 0 --device 0 --type dvddrive \
                                       --medium "$ISO_NAME"
   vboxVariant="Standard"
   if [ "$VARIANT" = "fixed" ] ; then
      vboxVariant="Fixed"
   fi
   VBoxManage createhd --filename "$HOME/VirtualBox VMs/$VM_NAME/DH0.vdi" --size "$DISK_SIZE" --format vdi \
                                                                          --variant "$VARIANT"
   VBoxManage storageattach "$VM_NAME" --storagectl "Storage Controller" --port 1 --device 0 --type hdd \
                                       --medium "$HOME/VirtualBox VMs/$VM_NAME/DH0.vdi" \
                                        $DISK_OPTIONS

elif [ "$NorNet_Server_VirtualizationSystem" = "KVM" ] ; then
   let DISK_SIZE=$4
   if [ ! -d "$HOME/KVM/$VM_NAME" ]; then
      sudo -u $NorNet_LocalNode_NorNetUser mkdir -p "$HOME/KVM/$VM_NAME"
   fi

   sparseMode="true"
   if [ "$VARIANT" = "fixed" ] ; then
      sparseMode="false"
   fi

   virsh destroy "$VM_NAME"  >/dev/null 2>&1 || true
   virsh undefine "$VM_NAME" >/dev/null 2>&1 || true
   rm -f "$HOME/KVM/$VM_NAME/DH0.*"

   options=""
   if [ "$sparseMode" == "true" ] ; then
      options="preallocation=off"
   else
      options="preallocation=full"
   fi
   qemu-img create -f qcow2 -o $options "$HOME/KVM/$VM_NAME/DH0.qcow2" ${DISK_SIZE}G
   virt-install --connect qemu:///system --virt-type kvm \
                --name "$VM_NAME" \
                --arch x86_64 --os-type="linux" --os-variant="fedora16" \
                --cpu host \
                --vcpu="$CPUS" \
                --ram "$MEMORY_SIZE" \
                --graphics vnc \
                --video=vga \
                --noautoconsole \
                --network bridge=br0,model=virtio \
                --disk path="$ISO_NAME",format=iso,device=cdrom,bus=ide \
                --disk path="$HOME/KVM/$VM_NAME/DH0.qcow2,format=qcow2,size="$DISK_SIZE",device=disk,bus=virtio",sparse=$sparseMode \
                --watchdog default,action=reset \
                --import --noreboot   # No installation procedure, no start of the domain

else
   echo >&2 "ERROR: Bad setting $NorNet_Server_VirtualizationSystem for NorNet_Server_VirtualizationSystem!"
   exit 1
fi


(
   echo "NAME=\"$VM_NAME"\"
   echo "STARTDELAY=30"
   echo "STOPDELAY=30"
   echo "OPTIONS=\"default\""
   echo "AUTO_UPDATE_BOOTCD=\"default\""
) >"70-$VM_NAME"
